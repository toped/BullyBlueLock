# Hardware Pin Defines ******************************************************
dim PORT_ZERO
dim PORT_ONE
dim PORT_TWO
dim PIN_ZERO
dim PIN_ONE
dim PIN_TWO
dim PIN_THREE
dim PIN_FOUR
dim PIN_FIVE
dim PIN_SIX
dim PIN_SEVEN



dim foo


#*****************************************************************************
# Variables for Manual Backup Event IRQ **************************************
dim ipr_result
dim ipr_port
dim ipr_data

# counter
dim int_i
dim int_j

# state variables
dim sequence
dim last_press
dim this_press

# Passcode value array
dim newPasscode
dim newPasscodeLength
dim passCode(9)
dim holdValues(9)
#*****************************************************************************

#declare buffer for building attribute value
dim tmp(2)
#store battery measurement result
dim batresult

# Custom data that we want to change (debugging variable)
dim hello_blue_value(20)
dim test(20)
# PS Variables
dim dataStored
dim len1
dim data1(20)

#*********************************************************************************************
# * Function:       Procedures 
# * Overview:       defined procedure list
# *
# * Notes:         All procedures are defined in the immediately following section
# *
# *********************************************************************************************
procedure clear_holdValues(value)
	#int_i = 0
	#while int_i < 9
	#	holdValues(int_i:1) = value
	#	int_i = int_i + 1
	#end while
	
	holdValues(0:1) = 0
	holdValues(1:1) = 0
	holdValues(2:1) = 0
	holdValues(3:1) = 0
	holdValues(4:1) = 0
	holdValues(5:1) = 0
	holdValues(6:1) = 0
	holdValues(7:1) = 0
	holdValues(8:1) = 0
end

procedure init_passCode(value)
	#int_j = 0
	#while int_j < 3
	#	int_j = int_j + 1
	#	passCode(int_j:1) = 1
	#end while
	
	passCode(0:1) = 1
	passCode(1:1) = 2
	passCode(2:1) = 3
	passCode(3:1) = 1
	passCode(4:1) = 2
	passCode(5:1) = 3
	passCode(6:1) = 1
	passCode(7:1) = 2
	passCode(8:1) = 3
	
end

#procedure new_passCode(value)
#	int_k = 0
#	while int_k < 9
#		
#		passCode(int_k:1) = value(int_k:1)
#		int_k = int_k + 1
#	end while
#end 

#procedure turn_motor(value)
	
	#1.) define pins 
	#2.) PWM -- timer?
	#3.) time-out
	#4.) end 
	
	# -----   Keep in mind only one timer can be going at one time----
	# pg 29 BGScript_developer_guide_v3.2.pdf
	# to stop the currently running timer you must make the following call:
	# call hardware_set_soft_timer(0,{handle},{singleshot})
	
#end


#*********************************************************************************************
# * Function:       system_boot(major, minor, patch, build, ll_version, protocol_version, hw)
# * Overview:       This is the systems basic start up routine.
# *
# * Notes:         
# *
# *********************************************************************************************/
event system_boot(major, minor, patch, build, ll_version, protocol_version, hw)
	#initialize variables 
	hello_blue_value(0:20) = "The Bully Blue Lock"
	test(0:20) = "A random string"
	
	# initialize manual backup variables
	sequence = 0
	last_press = 0
	this_press = 0
	call clear_holdValues(0)
	call init_passCode(0)
	
	foo = 1
	
	
	
	#initialize hardware pins and ports 
	PORT_ZERO = 000
	PORT_ONE  = 001
	PORT_TWO  = 002
	PIN_ZERO  = $01
	PIN_ONE   = $02
	PIN_TWO   = $04
	PIN_THREE = $08
	PIN_FOUR  = $10
	PIN_FIVE  = $20
	PIN_SIX   = $40
	PIN_SEVEN = $80
	
	#Enable advertising mode
	call gap_set_mode(gap_general_discoverable,gap_undirected_connectable)

	#Enable bondable mode
	call sm_set_bondable_mode(1)
	
	#initialize all pins as outputs or inputs
	call hardware_io_port_config_direction(PORT_ZERO, $E0)
	#initialize values of output pins to initially be low 
	call hardware_io_port_write(PORT_ZERO, $E0, 0)
	
	#start measurement, read VDD/3, 9 effective bits # (input, resolution, V reference)
	#turn on pin five for adc debugging
	#call hardware_adc_read(5,3,0)

	#turn on pin six as power LED
	call hardware_io_port_write(PORT_ZERO, PIN_SIX, PIN_SIX)
	
	# enable interrupt on P0_0, P0_1 and p0_2 rising edge # these are for the push button backup
    # (parameters are port=0, bitmask=0b00000111, edge=rising)
    call hardware_io_port_config_irq(0, 7, 1)
	#call hardware_io_port_irq_enable(0, 7)
	#call hardware_io_port_irq_direction(0,1)
	
	# Initialize a GATT value from a PS key, which is 20 bytes long
	call flash_ps_load($8000)(dataStored, len1, data1(0:len1))  
	# Write the PS value to handle with ID "xgatt_PS_value"
	call attributes_write(bully_blue, 0, len1, data1(0:len1))
	
	# Initialize manual backup passcode with value from a PS key, which is 9 bytes long
	call flash_ps_load($8001)(newPasscode, newPasscodeLength, passCode(0:newPasscodeLength)) 
	
	#P1_0 and P1_1 do not have pullup/pull down according to API Reference pg123
	call hardware_io_port_config_pull(PORT_ONE, 0, 0)
	
end

#*********************************************************************************************
# * Function:       attributes_value(connection, reason, handle, offset, value_len, value)
# * Overview:       GATT Event Listener
# *
# * Notes:         
# *
# *********************************************************************************************/
event attributes_value(connection, reason, handle, offset, value_len, value)
  if handle = bully_blue then

	 # Write attribute value to PS-store
	 call flash_ps_save($8000, value_len, value(0:value_len))
	
  end if
  
  # check if handle = 25 //backup code gatt characteristic 
  if handle = xgatt_backup then

	 #call the function that sets passCode element values to user defined values
	 #call new_passCode(value)
	
	 # save backup values:
	 passCode(0:1) = value(0:1)
	 passCode(1:1) = value(1:1)
	 passCode(2:1) = value(2:1)
	 passCode(3:1) = value(3:1)
	 passCode(4:1) = value(4:1)
	 passCode(5:1) = value(5:1)
	 passCode(6:1) = value(6:1)
	 passCode(7:1) = value(7:1)
	 passCode(8:1) = value(8:1)
 	
 	 # Write attribute value to PS-store 
	 call flash_ps_save($8001, value_len, value(0:value_len))
	 call flash_ps_load($8001)(newPasscode, newPasscodeLength, passCode(0:newPasscodeLength))
	   
  end if  
  
  if handle = xgatt_main_code then
    call hardware_io_port_config_direction(PORT_ONE, PIN_THREE)
	call hardware_io_port_write(PORT_ONE, PIN_THREE, PIN_THREE)
	#Set timer to generate event every 4s #1s
	call hardware_set_soft_timer(147456, 1, 1)
	call hardware_io_port_write(PORT_ZERO, PIN_FIVE, PIN_FIVE)
  end if
end

#*********************************************************************************************
# * Function:       connection_disconnected(handle, result)
# * Overview:       Event that Listens for a terminated connection.
# *
# * Notes:         
# *
# *********************************************************************************************/
event connection_disconnected(handle, result)
	#connection disconnected, continue advertising 
	call gap_set_mode(gap_general_discoverable,gap_undirected_connectable)
	call clear_holdValues(0)	
end


#*********************************************************************************************
# * Function:       hardware_adc_result(input,value)
# * Overview:       Event that that is triggered by an ADC read.
# *
# * Notes:          NEEDS WORK
# *
# *********************************************************************************************/
event hardware_adc_result(input,value)
    #scale value to range 0-100
	#measurement range is 32768 = 1.15v*3 = 3.45V
	#new battery ADC measurement is 20912=2.52v
	#minimum battery voltage is 2.0 volts=2.0v/3.45v*32768= 18996
	#20912-18996=1916
	
	batresult = value #(value-18995)*100/1916
	
	#clip to 100%
	#if batresult>100 then
	#	batresult=100
	#end if
	#if batresult<0 then
	#    batresult=0
	#end if

	tmp(0:2) = batresult
	
	call attributes_write(xgatt_battery, 0, 2, tmp(0:2))

end


#*************************************** pragma mark ******************************************************
#****************************** Code below handles manual backup*******************************************

# catch button press for P0_0, P0_1, P1_6 (active HIGH configuration, hardware.xml pulls it low)
event hardware_io_port_status(timestamp, port, irq, state)
		
#order is important. buttons must be pressed in this order: 123 123 123 
	
	
	# test port 0
    if port = 0 then
		# test pin 0_0
        if ((irq & 1) = 1)  then
			
			# Start of First Group ************************************************************************************
			if(sequence = 1 && last_press = 1) then 
				if(last_press = 1) then#check last button press
				
					if (holdValues(0:1) < 10) then
						holdValues(0:1) = holdValues(0:1) + 1
					end if
					
					#update last button press
					last_press = 1
				end if				
				
			end if # end sequence check
			
			if(sequence = 0) then #first button in passcode sequence
				sequence = 1
				holdValues(0:1) = holdValues(0:1) + 1
				
				#update last button press
				last_press = 1
			end if # end sequence check		
			
			
			# Start of Second Group ************************************************************************************
			if(sequence = 4 && last_press = 4) then 
				if(last_press = 4) then		#check last button press
					if (holdValues(3:1) < 10) then
						holdValues(3:1) = holdValues(3:1) + 1
					end if
					
					#update last button press
					last_press = 4
				end if				
				
			end if # end sequence 
			
			if(sequence = 3) then 
				sequence = 4
				holdValues(3:1) = holdValues(3:1) + 1
				
				#update last button press
				last_press = 4
			end if # end sequence check
			
			# Start of Third Group ************************************************************************************
			if(sequence = 7 && last_press = 7) then 
				if(last_press = 7) then		#check last button press
					if (holdValues(6:1) < 10) then
						holdValues(6:1) = holdValues(6:1) + 1
					end if
					
					#update last button press
					last_press = 7
				end if				
				
			end if # end sequence 
			
			if(sequence = 6) then 
				sequence = 7
				holdValues(6:1) = holdValues(6:1) + 1
				
				#update last button press
				last_press = 7
			end if # end sequence check
		
        end if
		
		# test pin 0_1
        if (irq & 2) = 2 then
		
			# First Group ************************************************************************************
			if(sequence = 2 && last_press = 2) then 
				if(last_press = 2) then#check last button press
					if (holdValues(1:1) < 10) then
						holdValues(1:1) = holdValues(1:1) + 1
					end if
					
					#update last button press
					last_press = 2
				end if		
				
			end if # end sequence check
			
			if(sequence = 1) then 
				sequence = 2
				holdValues(1:1) = holdValues(1:1) + 1
				
				#update last button press
				last_press = 2
			end if # end sequence check
			
			# Second Group ************************************************************************************
			if(sequence = 5 && last_press = 5) then 
				if(last_press = 5) then#check last button press
					if (holdValues(4:1) < 10) then
						holdValues(4:1) = holdValues(4:1) + 1
					end if
					
					#update last button press
					last_press = 5
				end if				
				
			end if # end sequence 
			
			if(sequence = 4) then #first button in passcode sequence
				sequence = 5
				holdValues(4:1) = holdValues(4:1) + 1
				
				#update last button press
				last_press = 5
			end if # end sequence check
			
			# Start of Third Group ************************************************************************************
			if(sequence = 8 && last_press = 8) then 
				if(last_press = 8) then		#check last button press
					if (holdValues(7:1) < 10) then
						holdValues(7:1) = holdValues(7:1) + 1
					end if
					
					#update last button press
					last_press = 8
				end if				
				
			end if # end sequence 
			
			if(sequence = 7) then 
				sequence = 8
				holdValues(7:1) = holdValues(7:1) + 1
				
				#update last button press
				last_press = 8
			end if # end sequence check
           
        end if
		
		# test pin 0_2
        if (irq & 4) = 4 then
		
			# First Group ************************************************************************************
            if(sequence = 3 && last_press = 3) then 
				if(last_press = 3) then#check last button press
					if (holdValues(2:1) < 10) then
						holdValues(2:1) = holdValues(2:1) + 1
					end if
					
					#update last button press
					last_press = 3
				end if		
				
			end if # end sequence check
			
			if(sequence = 2) then #first button in passcode sequence
				sequence = 3
				holdValues(2:1) = holdValues(2:1) + 1
				
				#update last button press
				last_press = 3
			end if # end sequence check
			
			# Second Group ************************************************************************************
			if(sequence = 6 && last_press = 6) then 
				if(last_press = 6) then#check last button press
					if (holdValues(5:1) < 10) then
						holdValues(5:1) = holdValues(5:1) + 1
					end if
					
					#update last button press
					last_press = 6
				end if				
				
			end if # end sequence 
			
			if(sequence = 5) then #first button in passcode sequence
				sequence = 6
				holdValues(5:1) = holdValues(5:1) + 1
				
				#update last button press
				last_press = 6
			end if # end sequence check
			
			# Start of Third Group ************************************************************************************
			if(sequence = 9 && last_press = 9) then 
				if(last_press = 9) then		#check last button press
					if (holdValues(8:1) < 10) then
						holdValues(8:1) = holdValues(8:1) + 1
					end if
					
					#update last button press
					last_press = 9
				end if				
				
			end if # end sequence 
			
			if(sequence = 8) then 
				sequence = 9
				holdValues(8:1) = holdValues(8:1) + 1
				
				#update last button press
				last_press = 9
			end if # end sequence check
			
        end if
		
		#Check if passcode was correct
		if (holdValues(0:3) = passCode(0:3)) then
			if (holdValues(3:3) = passCode(3:3)) then
				if (holdValues(6:3) = passCode(6:3)) then
					call hardware_io_port_config_direction(PORT_ONE, PIN_THREE)
					call hardware_io_port_write(PORT_ONE, PIN_THREE, PIN_THREE)
					
					call hardware_set_soft_timer(147456, 1, 1)
					call hardware_io_port_write(PORT_ZERO, PIN_FIVE, PIN_FIVE)
					
					call clear_holdValues(0)
					sequence = 0
					last_press = 0
				end if
			end if
		end if
			
    end if

end



#*********************************************************************************************
# * Function:       Timer 
# * Overview:       Timer Event Listener
# *
# * Notes:         
# *
# *********************************************************************************************/
event hardware_soft_timer(handle)

	if(handle = 1) then
		# turn off the motor control pins:
		call hardware_io_port_config_direction(PORT_ONE, PIN_THREE)
		call hardware_io_port_write(PORT_ONE, PIN_THREE, 0)
		call hardware_io_port_write(PORT_ZERO, PIN_FIVE, 0)
	end if

end




